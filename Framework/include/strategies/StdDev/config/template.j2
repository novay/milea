/**
 * @file
 * Defines default strategy parameter values for the given timeframe.
 */

// Defines indicator's parameter values for the given pair symbol and timeframe.
struct Indi_StdDev_Params_{{ Timeframe }} : StdDevParams {
  Indi_StdDev_Params_{{ Timeframe }}() : StdDevParams(indi_stddev_defaults, PERIOD_{{ Timeframe }}) {
    applied_price = (ENUM_APPLIED_PRICE){{ StdDev_Indi_StdDev_Applied_Price | default(0) }};
    ma_method = (ENUM_MA_METHOD){{ StdDev_Indi_StdDev_MA_Method | default(0) }};
    ma_period = {{ StdDev_Indi_StdDev_MA_Period | default(0) }};
    shift = {{ StdDev_Indi_StdDev_Shift | default(0) }};
  }
} indi_stddev_{{ Timeframe | lower }};

// Defines strategy's parameter values for the given pair symbol and timeframe.
struct Stg_StdDev_Params_{{ Timeframe }} : StgParams {
  // Struct constructor.
  Stg_StdDev_Params_{{ Timeframe }}() : StgParams(stg_stddev_defaults) {
    lot_size = {{ StdDev_LotSize | default(0) }};
    signal_open_method = {{ StdDev_SignalOpenMethod | default(0) }};
    signal_open_filter_method = {{ StdDev_SignalOpenFilterMethod | default(1) }};
    signal_open_level = (float){{ StdDev_SignalOpenLevel | default(0) }};
    signal_open_boost = {{ StdDev_SignalOpenBoostMethod | default(0) }};
    signal_close_method = {{ StdDev_SignalCloseMethod | default(0) }};
    signal_close_level = (float){{ StdDev_SignalCloseLevel | default(0) }};
    price_stop_method = {{ StdDev_PriceStopMethod | default(0) }};
    price_stop_level = (float){{ StdDev_SignalCloseLevel | default(1) }};
    tick_filter_method = {{ StdDev_TickFilterMethod  | default(1) }};
    max_spread = {{ StdDev_MaxSpread | default(0) }};
  }
} stg_stddev_{{ Timeframe | lower }};
