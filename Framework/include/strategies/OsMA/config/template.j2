/**
 * @file
 * Defines default strategy parameter values for the given timeframe.
 */

// Defines indicator's parameter values for the given pair symbol and timeframe.
struct Indi_OsMA_Params_{{ Timeframe }} : OsMAParams {
  Indi_OsMA_Params_{{ Timeframe }}() : OsMAParams(indi_osma_defaults, PERIOD_{{ Timeframe }}) {
    applied_price = (ENUM_APPLIED_PRICE){{ OsMA_Indi_OsMA_Applied_Price | default(0) }};
    ema_fast_period = {{ OsMA_Indi_OsMA_Period_Fast | default(0) }};
    ema_slow_period = {{ OsMA_Indi_OsMA_Period_Slow | default(0) }};
    signal_period = {{ OsMA_Indi_OsMA_Period_Signal | default(0) }};
    shift = {{ OsMA_Indi_OsMA_Shift | default(0) }};
  }
} indi_osma_{{ Timeframe | lower }};

// Defines strategy's parameter values for the given pair symbol and timeframe.
struct Stg_OsMA_Params_{{ Timeframe }} : StgParams {
  // Struct constructor.
  Stg_OsMA_Params_{{ Timeframe }}() : StgParams(stg_osma_defaults) {
    lot_size = {{ OsMA_LotSize | default(0) }};
    signal_open_method = {{ OsMA_SignalOpenMethod | default(0) }};
    signal_open_filter_method = {{ OsMA_SignalOpenFilterMethod | default(1) }};
    signal_open_level = (float){{ OsMA_SignalOpenLevel | default(0) }};
    signal_open_boost = {{ OsMA_SignalOpenBoostMethod | default(0) }};
    signal_close_method = {{ OsMA_SignalCloseMethod | default(0) }};
    signal_close_level = (float){{ OsMA_SignalCloseLevel | default(0) }};
    price_stop_method = {{ OsMA_PriceStopMethod | default(0) }};
    price_stop_level = (float){{ OsMA_SignalCloseLevel | default(1) }};
    tick_filter_method = {{ OsMA_TickFilterMethod  | default(1) }};
    max_spread = {{ OsMA_MaxSpread | default(0) }};
  }
} stg_osma_{{ Timeframe | lower }};
