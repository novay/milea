/**
 * @file
 * Defines default strategy parameter values for the given timeframe.
 */

// Defines indicator's parameter values for the given pair symbol and timeframe.
struct Indi_DEMA_Params_{{ Timeframe }} : DEMAParams {
  Indi_DEMA_Params_{{ Timeframe }}() : DEMAParams(indi_dema_defaults, PERIOD_{{ Timeframe }}) {
    applied_price = (ENUM_APPLIED_PRICE){{ DEMA_Indi_DEMA_Applied_Price | default(0) }};
    ma_shift = {{ DEMA_MA_Shift | default(0) }};
    period = {{ DEMA_Indi_DEMA_Period | default(0) }};
    shift = {{ DEMA_Indi_DEMA_Shift | default(0) }};
  }
} indi_dema_{{ Timeframe | lower }};

// Defines strategy's parameter values for the given pair symbol and timeframe.
struct Stg_DEMA_Params_{{ Timeframe }} : StgParams {
  // Struct constructor.
  Stg_DEMA_Params_{{ Timeframe }}() : StgParams(stg_dema_defaults) {
    lot_size = {{ DEMA_LotSize | default(0) }};
    signal_open_method = {{ DEMA_SignalOpenMethod | default(0) }};
    signal_open_filter_method = {{ DEMA_SignalOpenFilterMethod | default(1) }};
    signal_open_level = (float){{ DEMA_SignalOpenLevel | default(0) }};
    signal_open_boost = {{ DEMA_SignalOpenBoostMethod | default(0) }};
    signal_close_method = {{ DEMA_SignalCloseMethod | default(0) }};
    signal_close_level = (float){{ DEMA_SignalCloseLevel | default(0) }};
    price_stop_method = {{ DEMA_PriceStopMethod | default(0) }};
    price_stop_level = (float){{ DEMA_SignalCloseLevel | default(1) }};
    tick_filter_method = {{ DEMA_TickFilterMethod  | default(1) }};
    max_spread = {{ DEMA_MaxSpread | default(0) }};
  }
} stg_dema_{{ Timeframe | lower }};
